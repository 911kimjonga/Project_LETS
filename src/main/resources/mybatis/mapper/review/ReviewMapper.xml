<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.vj.lets.domain.review.mapper.ReviewMapper">

    <insert id="create" parameterType="Review">
        INSERT INTO REVIEW(CONTENT, RATING, RESERVATION_ID, MEMBER_ID)
        VALUES (#{content}, #{rating}, #{reservationId}, #{memberId})
    </insert>

    <select id="readAll" resultType="Map">
        SELECT rev.ID                                  AS id,
               rev.CONTENT                             AS content,
               rev.RATING                              AS rating,
               DATE_FORMAT(rev.WRITE_DATE, '%Y-%m-%d') AS writeDate,
               rev.STATUS                              AS status,
               c.NAME                                  AS cafeName,
               roo.NAME                                AS roomName,
               res.BOOKING_DATE                        AS bookingDate
        FROM REVIEW rev
                 JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
                 JOIN CAFE c ON res.CAFE_ID = c.ID
                 JOIN ROOM roo ON res.ROOM_ID = roo.ID
        ORDER BY WRITE_DATE DESC
    </select>

    <select id="readByCafe" parameterType="int" resultType="Map">
        SELECT rev.ID                                  AS id,
               rev.CONTENT                             AS content,
               rev.RATING                              AS rating,
               DATE_FORMAT(rev.WRITE_DATE, '%Y-%m-%d') AS writeDate,
               m.NAME                                  AS writerName,
               m.EMAIL                                 AS writerId,
               m.IMAGE_PATH                            AS writerImagePath,
               roo.NAME                                AS roomName,
               res.ID                                  AS reservationId
        FROM REVIEW rev
                 JOIN MEMBER m ON rev.MEMBER_ID = m.ID
                 JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
                 JOIN CAFE c ON res.CAFE_ID = c.ID
                 JOIN ROOM roo ON res.ROOM_ID = roo.ID
        WHERE rev.STATUS = 'enabled'
          AND c.ID = #{cafeId}
          AND m.TYPE = 'guest'
        ORDER BY res.BOOKING_DATE DESC
        LIMIT #{pageParams.elementSize} OFFSET #{pageParams.offset}
    </select>

    <select id="countByReviewRating" parameterType="int" resultType="map">
        SELECT ROUND(COUNT(CASE WHEN RATING = 5 THEN 1 END) / COUNT(RATING) * 100, -1) AS five,
               ROUND(COUNT(CASE WHEN RATING = 4 THEN 1 END) / COUNT(RATING) * 100, -1) AS four,
               ROUND(COUNT(CASE WHEN RATING = 3 THEN 1 END) / COUNT(RATING) * 100, -1) AS three,
               ROUND(COUNT(CASE WHEN RATING = 2 THEN 1 END) / COUNT(RATING) * 100, -1) AS two,
               ROUND(COUNT(CASE WHEN RATING = 1 THEN 1 END) / COUNT(RATING) * 100, -1) AS one
        FROM REVIEW rev
                 JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
        WHERE res.CAFE_ID = #{cafeId}
          AND RATING != 0
    </select>

    <select id="readCountByMember" parameterType="int" resultType="int">
        SELECT COUNT(r.ID) AS count
        FROM REVIEW r
                 JOIN MEMBER m ON r.MEMBER_ID = m.ID
        WHERE r.STATUS = 'enabled'
          AND m.ID = #{memberId}
    </select>

    <select id="readByMember" resultType="Map">
        SELECT rev.ID                                  AS id,
               rev.CONTENT                             AS content,
               rev.RATING                              AS rating,
               DATE_FORMAT(rev.WRITE_DATE, '%Y-%m-%d') AS writeDate,
               c.NAME                                  AS cafeName,
               roo.NAME                                AS roomName,
               roo.IMAGE_PATH                          AS roomImage,
               res.ID                                  AS reservationId
        FROM REVIEW rev
                JOIN MEMBER m ON rev.MEMBER_ID = m.ID
                JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
                JOIN CAFE c ON res.CAFE_ID = c.ID
                JOIN ROOM roo ON res.ROOM_ID = roo.ID
        WHERE rev.STATUS = 'enabled'
            AND m.ID = #{memberId}
        ORDER BY res.BOOKING_DATE
        <choose>
            <when test="pageParams.type == 'oldest'">
                ASC
            </when>
            <otherwise>
                DESC
            </otherwise>
        </choose>
        LIMIT #{pageParams.elementSize} OFFSET #{pageParams.offset}
    </select>

    <select id="readHostCommentByResId" parameterType="int" resultType="Map">
        SELECT rev.CONTENT                             AS commentContent,
               DATE_FORMAT(rev.WRITE_DATE, '%Y-%m-%d') AS commentWriteDate,
               rev.ID                                  AS commentRevId
        FROM REVIEW rev
                 JOIN MEMBER m ON rev.MEMBER_ID = m.ID
                 JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
                 JOIN CAFE c ON res.CAFE_ID = c.ID
                 JOIN ROOM roo ON res.ROOM_ID = roo.ID
        WHERE rev.STATUS = 'enabled'
          AND res.ID = #{reservationId}
          AND m.TYPE = 'host'
    </select>

    <select id="readCountByResId" parameterType="int" resultType="boolean">
        SELECT COUNT(rev.ID)
        FROM REVIEW rev
                 JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
        WHERE rev.STATUS = 'enabled'
          AND res.ID = #{reservationId}
    </select>

    <select id="readCountByHost" parameterType="int" resultType="int">
        SELECT COUNT(rev.ID) AS count
        FROM REVIEW rev
                 JOIN RESERVATION res ON rev.RESERVATION_ID = res.ID
                 JOIN CAFE c ON res.CAFE_ID = c.ID
                 JOIN MEMBER m ON rev.MEMBER_ID = m.id
        WHERE rev.STATUS = 'enabled'
          AND c.ID = #{cafeId}
          AND m.TYPE = 'guest'
    </select>

    <select id="readByHost" resultType="Map">
        SELECT rev.ID                                  AS id,
               rev.CONTENT                             AS content,
               rev.RATING                              AS rating,
               DATE_FORMAT(rev.WRITE_DATE, '%Y-%m-%d') AS writeDate,
               c.NAME                                  AS cafeName,
               roo.NAME                                AS roomName,
               roo.IMAGE_PATH                          AS roomImage,
               res.ID                                  AS reservationId,
               m.IMAGE_PATH                            AS guestProfile,
               m.NAME                                  AS reserveName,
               m.EMAIL                                 AS reserveId,
               m.TYPE                                  AS memberType,
               (SELECT COUNT(reservation_ID)
                FROM REVIEW
                WHERE STATUS = 'enabled'
                  AND reservation_ID = res.ID)       AS reviewCount
        FROM REVIEW rev
                       JOIN MEMBER m ON rev.MEMBER_ID = m.ID
                       JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
                       JOIN CAFE c ON res.CAFE_ID = c.ID
                       JOIN ROOM roo ON res.ROOM_ID = roo.ID
        WHERE rev.STATUS = 'enabled'
                 AND c.ID = #{cafeId}
                 AND res.STATUS != 'cancel'
                 AND m.TYPE != 'host'
        ORDER BY res.BOOKING_DATE ASC
        LIMIT #{pageParams.elementSize} OFFSET #{pageParams.offset}
    </select>

    <select id="readTodayReview" parameterType="int" resultType="int">
        SELECT COUNT(WRITE_DATE) AS count
        FROM REVIEW rev
                 JOIN MEMBER m ON rev.MEMBER_ID = m.ID
                 JOIN RESERVATION res ON res.ID = rev.RESERVATION_ID
                 JOIN CAFE c ON res.CAFE_ID = c.ID
        WHERE rev.STATUS = 'enabled'
          AND c.ID = #{cafeId}
          AND m.TYPE = 'guest'
          AND DATE_FORMAT(WRITE_DATE, '%y/%m/%d') = DATE_FORMAT(NOW(), '%y/%m/%d')
    </select>

    <update id="update" parameterType="Review">
        UPDATE REVIEW
        <set>
            <if test="content != null and content != ''">CONTENT = #{content},</if>
            <if test="rating != null">RATING = #{rating},</if>
        </set>
        WHERE ID = #{id}
    </update>

    <update id="disabled" parameterType="int">
        UPDATE REVIEW
        SET STATUS = 'disabled'
        WHERE ID = #{id}
    </update>

</mapper>